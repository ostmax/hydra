"""
Integration tests for Hydra core components
"""

import unittest
from datetime import datetime

from src.core.system_config import SystemConfig
from src.core.data_manager import DataManager
from src.utils.logger import setup_logger
from config.database import MongoDBConfig

class TestIntegration(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.logger = setup_logger("test_integration")
        self.config = SystemConfig()
        self.data_manager = DataManager()
    
    def test_system_config_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.logger.info("Testing system configuration integration")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        self.assertIsNotNone(self.config)
        self.assertGreater(self.config.total_ram_gb, 0)
        self.assertGreater(self.config.cpu_cores, 0)
        self.assertIn('historical', self.config.batch_sizes)
        
        self.logger.info(f"Config: {self.config.total_ram_gb}GB RAM, {self.config.cpu_cores} cores")
    
    def test_logger_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞"""
        self.logger.info("Info message test")
        self.logger.warning("Warning message test")
        self.logger.error("Error message test")
        
        # –õ–æ–≥–≥–µ—Ä –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫
        self.assertTrue(True)
    
    def test_database_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB"""
        self.logger.info("Testing MongoDB connection")
        
        db_config = MongoDBConfig()
        connection_success = db_config.connect()
        
        if connection_success:
            self.logger.info("‚úÖ MongoDB connection successful")
            db_config.close()
        else:
            self.logger.warning("‚ö†Ô∏è MongoDB not available, skipping test")
            self.skipTest("MongoDB not available")
    
    def test_data_manager_basic(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ DataManager"""
        self.logger.info("Testing DataManager basic functionality")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è
        self.assertIsNotNone(self.data_manager)
        self.assertIsNotNone(self.data_manager.config)
        self.assertIsNotNone(self.data_manager.realtime_queues)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏
        self.assertIn('metrics', self.data_manager.realtime_queues)
        self.assertIn('signals', self.data_manager.realtime_queues)
        self.assertIn('errors', self.data_manager.realtime_queues)
    
    def test_config_and_manager_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.logger.info("Testing config-manager integration")
        
        # –ö–æ–Ω—Ñ–∏–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º
        self.assertEqual(self.data_manager.config.total_ram_gb, self.config.total_ram_gb)
        self.assertEqual(self.data_manager.config.cpu_cores, self.config.cpu_cores)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞—Ç—á–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã
        self.assertEqual(
            self.data_manager.config.batch_sizes['historical'],
            self.config.batch_sizes['historical']
        )

def run_integration_tests():
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ Running Hydra Integration Tests")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    suite = unittest.TestLoader().loadTestsFromTestCase(TestIntegration)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    print("=" * 50)
    if result.wasSuccessful():
        print("‚úÖ All integration tests passed!")
    else:
        print("‚ùå Some tests failed")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    run_integration_tests()
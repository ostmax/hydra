Структура проекта Hydra - Объяснение

hydra/
├── .github/                 # CI/CD и автоматизация
├── config/                  # Файлы конфигурации
├── docs/                    # Документация
├── scripts/                 # Вспомогательные скрипты
├── src/                     # Основной исходный код
│   ├── core/               # Основная функциональность системы
│   ├── data/               # Обработка данных
│   ├── ml/                 # Машинное обучение
│   ├── trading/            # Торговая логика
│   └── utils/              # Общие утилиты
├── tests/                   # Полное тестирование
└── requirements/           # Управление зависимостями

Слой конфигурации (config/)

config/
├── __init__.py             # Инициализация пакета
├── settings.py            # Основные настройки приложения
├── database.py            # Конфигурация MongoDB
└── api_keys.py           # Управление API ключами (через .env)

Назначение: Централизованное управление конфигурацией. Легко менять базы данных, API или настройки без изменения бизнес-логики.

Ядро системы (src/core/)

src/core/
├── __init__.py
├── system_config.py       # Автоопределение железа и оптимизация
├── data_manager.py        # Оркестрация данных
└── memory_guard.py        # Управление памятью и защита

Ключевые файлы:

system_config.py - Автоматически определяет железо и оптимизирует настройки
data_manager.py - Оркестрирует весь пайплайн данных
memory_guard.py - Защита от перегрузки памяти на слабом железе

Пайплайн данных (src/data/)

src/data/
├── collectors/            # Сбор данных из различных источников
│   ├── base_collector.py  # Абстрактный интерфейс коллектора
│   ├── binance_collector.py  # Данные с Binance API
│   └── glassnode_collector.py # On-chain метрики
├── processors/            # Обработка данных и feature engineering
│   ├── base_processor.py  # Абстрактный интерфейс процессора
│   ├── feature_engineer.py # Технические индикаторы и фичи
│   └── data_cleaner.py    # Очистка и нормализация данных
├── storers/               # Стратегии хранения данных
│   ├── base_storer.py     # Абстрактный интерфейс хранилища
│   ├── mongo_storer.py    # Хранение в MongoDB
│   └── cache_storer.py    # In-memory кэширование
└── data_manager.py        # Фасад оркестрации данных

Поток данных: Сбор → Обработка → Хранение → Использование

Машинное обучение (src/ml/)

src/ml/
├── training/              # Обучение моделей
│   ├── __init__.py
│   ├── trainer.py         # Логика обучения моделей
│   └── data_preprocessor.py # Подготовка данных для ML
├── inference/             # Предсказания моделей
│   ├── __init__.py 
│   └── predictor.py       # Предсказания в реальном времени
├── evaluation/            # Оценка моделей
│   ├── __init__.py
│   └── validator.py       # Валидация производительности
└── __init__.py

Назначение: Отделение жизненного цикла ML от торговой логики для экспериментов.

Торговая логика (src/trading/)

src/trading/
├── signals/               # Генерация сигналов
│   ├── __init__.py
│   └── generator.py       # Генерация торговых сигналов
├── risk/                  # Управление рисками
│   ├── __init__.py
│   └── manager.py         # Расчет и управление рисками
└── __init__.py

Разделение: Сигналы не знают о рисках, риски не знают о ML.

src/utils/
├── __init__.py
├── logger.py              # Унифицированная система логирования
├── helpers.py             # Общие вспомогательные функции
└── validators.py          # Утилиты валидации данных

Назначение: Общая функциональность для всех модулей.

Тестирование (tests/)

tests/
├── unit/                  # Юнит-тесты (отдельные компоненты)
│   ├── test_system_config.py
│   ├── test_data_cleaner.py
│   └── ...
├── integration/           # Интеграционные тесты (взаимодействие)
│   ├── test_data_pipeline.py
│   └── test_ml_integration.py
├── performance/           # Тестирование производительности
│   └── test_performance.py
└── __init__.py

Стратегия тестирования: Обеспечение надежности на всех уровнях.

Автоматизация (scripts/)

scripts/
├── test_data_collection.py # Тестирование пайплайна данных
├── train_model.py         # Скрипт обучения моделей
├── deploy.py             # Автоматизация деплоя
└── __init__.py

Назначение: Автоматизация повторяющихся задач и тестирования.